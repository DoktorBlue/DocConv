<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="4/17/2019 10:40:16 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="VMT010140177175"
  DTS:CreatorName="TEST\bla061"
  DTS:DTSID="{0C37F85C-CA1C-42AC-8CFA-9F7706163757}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.1300.375"
  DTS:LocaleID="1043"
  DTS:ObjectName="Package"
  DTS:PackageType="5"
  DTS:VersionBuild="5"
  DTS:VersionGUID="{8A89437F-75F3-4E1E-AD0D-F5CB6D2085E1}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Activity"
      DTS:CreationName="Microsoft.ExecutePackageTask"
      DTS:Description="Execute Package Task"
      DTS:DTSID="{A471D6A6-9535-4E51-9F0D-0BA33DE021BC}"
      DTS:ExecutableType="Microsoft.ExecutePackageTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Activity"
      DTS:TaskContact="Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <ExecutePackageTask>
          <UseProjectReference>True</UseProjectReference>
          <PackageName>Import Activity.dtsx</PackageName>
        </ExecutePackageTask>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Case"
      DTS:CreationName="Microsoft.ExecutePackageTask"
      DTS:Description="Execute Package Task"
      DTS:DTSID="{40F122D1-003A-4E98-9A2A-9AC8185C42F3}"
      DTS:ExecutableType="Microsoft.ExecutePackageTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Case"
      DTS:TaskContact="Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <ExecutePackageTask>
          <UseProjectReference>True</UseProjectReference>
          <PackageName>Import Case.dtsx</PackageName>
        </ExecutePackageTask>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Contact"
      DTS:CreationName="Microsoft.ExecutePackageTask"
      DTS:Description="Execute Package Task"
      DTS:DTSID="{7A291A93-B948-40F1-9ED7-BC3248AE4C4D}"
      DTS:ExecutableType="Microsoft.ExecutePackageTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Contact"
      DTS:TaskContact="Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <ExecutePackageTask>
          <UseProjectReference>True</UseProjectReference>
          <PackageName>Import Contact.dtsx</PackageName>
        </ExecutePackageTask>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Data Flow Task"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:Description="Data Flow Task"
      DTS:DTSID="{DF9C8EFA-03FD-4646-B619-8E08F4AFE591}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Data Flow Task"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline
          version="1">
          <components>
            <component
              refId="Package\Data Flow Task\JavaScript Component"
              componentClassID="Microsoft.ManagedComponentHost"
              contactInfo="Use JavaScript code to automate any custom logic in the package data flow.; COZYROC LLC; SSIS+; © 2006-2019 COZYROC LLC; All Rights Reserved; http://www.cozyroc.com/;0"
              description="Use JavaScript code to automate any custom logic in the package data flow."
              name="JavaScript Component">
              <properties>
                <property
                  dataType="System.String"
                  description="Code of the linked JavaScript file."
                  name="JavaScriptCode"
                  typeConverter="NOTBROWSABLE">&lt;![CDATA[// JavaScript Component documentation: http://www.cozyroc.com/ssis/javascript-component
// JavaScript Component programming reference: http://www.cozyroc.com/ssis/javascript-api

/* Use "require" to load additional JavaScript modules.
 * The corresponding JS files need to be available at &lt;COZYROC SSIS+ install folder&gt;\SSIS\JS\.
 * 
 * */

// This module contains auxiliary functions for parameters validation.
require("validation.js");

// This module contains auxiliary functions for inputs, outputs and columns manipulation.
require("component.metadata.js");


/* JavaScript Component Parameters documentation: http://www.cozyroc.com/ssis/javascript-parameters
 * 
 * A JavaScript Component can be easily parameterized by adding properties to the "component.parameters" object.
 * You can specify for a "Parameter" object a name, description, category, type, default value, etc.
 * You can also assign to parameters functions for validation, enabling, specifying of allowed values, etc. 
 * 
 * The values of the component parameters can be retrieved and set within the script like this:
 *    var batchSize = component.parameters.CounterStart.value; // gets a parameter value
 *    component.parameters.CounterStart.value = 1; // sets a parameter value
 * */
component.parameters = {
    // Email: { description: "Enter email", 
    //      category: "Credentials", password: false },
    // Password: { description: "Enter password", 
    //      category: "Credentials", password: "true" },
};


/* Whenever a standalone validation of parameter values is insufficient, you can use global validation to 
 * check at once the values of several related parameters.
 * 
 * To indicate validation error(s), simply return a non-empty string.
 * */
component.validate = function () {
    //if (!!component.parameters.ParamA.value &amp;&amp;
    //    !!component.parameters.ParamB.value &amp;&amp;
    //    component.parameters.CoeffA.value &lt;= component.parameters.CoeffB.value)
    //{
    //    return "The parameter A must be greater than the parameter B!";
    //}
};


/* Help: Variables and package or project parameters
 * Variables and package or project parameters are accessible only during JavaScript Expression execution. 
 * There is no need to declare Variables or parameters which will be used. All Variables or parameters with 
 * package or parent DataFlow Task scope are available.
 * Package and project parameters are read-only.
 * 
 * Variable or package parameter can be accessed via "component.variables".
 * 
 * Example of reading from a variable:
 * var userName = component.variables["System::UserName"].value;
 * 
 * Example of writing to a variable:
 * component.variables["User::MyVariable"].value = "a string value";
 * 
 * Example of reading from a package parameter:
 * var kind = component.variables["$Package::ReportKind"].value;
 *
 * Example of reading from a sensitive project parameter:
 * var password = component.variables["$Project::SitePassword"].sensitiveValue;
 * 
 * 
 * Explicit locking of a Variable is not required. In the above examples, variables are locked and unlocked 
 * automatically. To speed up script execution an explicit locking can be used.
 * 
 * Shared locking (ReadOnly Variable):
 
 var userNameVariable = component.variables["System::UserName"];
 userNameVariable.lockShared();
 
 var userName = userNameVariable.Value;
 userNameVariable.unlock();
 
 Exclusive locking (ReadWrite Variable):
 var myVariable = component.variables["User::MyVariable"];
 myVariable.lockExclusive();
 
 myVariable.value = "a string value";
 myVariable.unlock();
   
 * Explicit unlocking is optional, as all locked variables will be unlocked after the script execution. An
 * exclusively locked variable must be unlocked to be available to another Task or Component running in parallel.
 * */


/* Help: Firing Integration Services events from a script
 * This component can fire events for logging purposes.
 * 
 * Example of firing an error event:
 * console.error("Timeout!")
 * 
 * Example of firing an information event:
 * console.info("Downloading.");
 * 
 * Example of firing a warning event:
 * console.warning("Warning!");
 * 
 * Example of firing a progress event:
 * console.progress(50, "Processing info.");
 * console.progress(100, "Processing done.");
 * */


/* Help: Using Integration Services connection managers in a script
 * 
 * Various connection managers can be used in the JavaScript Component.
 * Connections are accessible everywhere - during parameters configuration in JavaScript Component Editor and 
 * during JavaScript Expressions execution.
 * 
 * Example of using an ADO.Net connection manager:
 var conn = component.connections["My Database"].acquire();
 try {
     var dt = conn.execute("SELECT name FROM sys.databases");
     var result = _.map(dt, function (rec) { return rec[0]; });
     return result;
 }
 finally {
     conn.close();
 }
 
 * Example of using a File connection manager:
 var fileName = component.connections["File.txt"].acquire()
 * */


/* Help: Using the reinitialize metadata Expression.
 * 
 * This expression is executed when tab is changed into the JavaScript Component Editor. You can add, edit and 
 * delete Inputs, Outputs and their columns (e.g. you can create external metadata columns).
 * 
 * NOTE: `reinitializeMetadata` is called before the validation. 
 * */
//component.reinitializeMetadata = function () {
//};


/* Help: Using the on input path attached Expression
 * 
 * This expression is executed when an input path is attached. It has one parameter - the id of the attached input.
 * */
//component.onInputPathAttached = function (inputID) {
//};


/* Help: Using the on input path detached Expression
 * 
 * This expression is executed when an input path is detached. It has one parameter - the id of the detached input.
 * */
//component.onInputPathDetached = function (inputID) {
//};


/* Help: Using the on output path attached Expression
 * 
 * This expression is executed when an output path is attached. It has one parameter - the id of the attached output.
 * */
//component.onOutputPathAttached = function (outputID) {
//};


/* Help: Using the pre-execute Expression.
 * 
 * This expression is executed during the component "pre execute" phase. Here you can acquire connections and
 * lock variables.
 * */
component.preExecute = function () {
};


/* Help: Using the post-execute Expression.
 * 
 * This expression is executed during the component "post-execute" phase. Here you can release connections and 
 * unlock variables, if necessary.
 * */
component.postExecute = function () {
};


/* Help: Using the process data Expression.
 * 
 * This expression is executed during the input and output buffers processing.
 * 
 * The value of the expression can be a global or a local function, or just a JavaScript expression, which is 
 * returning a function. The expression is mandatory. If a local function is used, `this` would refer to the 
 * `component` object.
 * 
 * The function has two parameters: "inputBuffer" (the current input buffer) and an "outputs" object. 
 * An output buffer can be retrieved by the output name (e.g. outputs["Output 0"]) or via  * the properties 
 * "sync" or "async", which return arrays. The "sync" array contains all output buffers which are synchronous 
 * with the current input. The "async" array contains all asynchronous output buffers.
 * 
 * When at least one asynchronous output is present, the first call of "processData" will be only with the
 * asynchronous outputs. The "inputBuffer" parameter will have a null value.
 * 
 * Next "processData" is called once for each input. If this input has synchronous outputs, they will be present
 * in the "output" object. The asynchronous outputs are always present in the "output" object.
 * 
 * Columns values can be get and set by using the buffer functions "get" and "set":
 * - The "get" function has one argument which is the original index of the column or the column name: 
 * `inputBuffer.get(0)` or `inputBuffer.get("RowId")`.
 * - The "set" function has two arguments, the first is the original index of the column or its name, the second
 * is the new value: `outputBuffer.set(1, "1st Avenue")` or `outputBuffer.set("Street name", "1st Avenue").`
 * 
 * 
 *** A simple example of processing a synchronous output:

component.processData = function (inputBuffer, outputs) {
    var outputBuffer = outputs.sync[0];
    while (inputBuffer.nextRow())
        outputBuffer.set("FullName", inputBuffer.get("FirstName") + " " + inputBuffer.get("LastName"));
};

 *** A simple example of processing an asynchronous output:
 
component.processData = function (inputBuffer, outputs) {
    if (!inputBuffer)
        return; // Nothing to do during the first call that has only the asynchronous outputs

    var outputBuffer = outputs.async[0];
    if (inputBuffer.endOfRowset) {
        outputBuffer.setEndOfRowset(); // Signal the end of output rows, when there are no more input rows
        return;
    }

    while (inputBuffer.nextRow()) {
        outputBuffer.addRow(); // Add row to the asynchronous output
        outputBuffer.set("CreationDate", new Date(inputBufer.get("StrCreationDate")));
    }
}
 * */
component.processData = function (inputBuffer, outputs) {
    alert('Hello, world!');
};
]]&gt;</property>
                <property
                  dataType="System.String"
                  description="Serialized parameters keys and values."
                  name="ParametersValues"
                  state="cdata"
                  typeConverter="NOTBROWSABLE"><![CDATA[<dictionary />]]></property>
                <property
                  dataType="System.String"
                  description="Specifies the Package connection manager that the task uses."
                  name="PackageConnection"
                  typeConverter="NOTBROWSABLE"></property>
                <property
                  dataType="System.String"
                  description="Select JavaScriptComponent."
                  name="JavaScriptLinkedComponent"
                  typeConverter="NOTBROWSABLE"></property>
                <property
                  dataType="System.String"
                  description="List of breakpoints in the script."
                  isArray="true"
                  name="Breakpoints"
                  typeConverter="NOTBROWSABLE">
                  <arrayElements
                    arrayElementCount="0" />
                </property>
                <property
                  dataType="System.String"
                  name="UserComponentTypeName">CozyRoc.JavaScriptComponent</property>
              </properties>
              <inputs>
                <input
                  refId="Package\Data Flow Task\JavaScript Component.Inputs[Input 0]"
                  hasSideEffects="true"
                  name="Input 0">
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Data Flow Task\JavaScript Component.Outputs[Output 0]"
                  name="Output 0"
                  synchronousInputId="Package\Data Flow Task\JavaScript Component.Inputs[Input 0]">
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Data Flow Task\Multicast"
              componentClassID="Microsoft.Multicast"
              contactInfo="Multicast;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Distributes every input row to every row in one or more outputs. For example, branch your data flow to make a copy of data so that some values can be masked before sharing with external partners."
              name="Multicast">
              <inputs>
                <input
                  refId="Package\Data Flow Task\Multicast.Inputs[Multicast Input 1]"
                  name="Multicast Input 1">
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Data Flow Task\Multicast.Outputs[Multicast Output 1]"
                  dangling="true"
                  deleteOutputOnPathDetached="true"
                  name="Multicast Output 1"
                  synchronousInputId="Package\Data Flow Task\Multicast.Inputs[Multicast Input 1]">
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Data Flow Task\OLE DB Source"
              componentClassID="Microsoft.OLEDBSource"
              contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
              description="OLE DB Source"
              name="OLE DB Source"
              usesDispositions="true"
              version="7">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset"></property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">select count(1) AS Cnt from Sys.Tables</property>
                <property
                  dataType="System.String"
                  description="The variable that contains the SQL command to be executed."
                  name="SqlCommandVariable"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">2</property>
                <property
                  dataType="System.String"
                  description="The mappings between the parameters in the SQL command and variables."
                  name="ParameterMapping"></property>
              </properties>
              <connections>
                <connection
                  refId="Package\Data Flow Task\OLE DB Source.Connections[OleDbConnection]"
                  connectionManagerID="{A5EEED69-0923-4E82-9E89-CC99662E7FE4}:external"
                  connectionManagerRefId="Project.ConnectionManagers[Sonar]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <outputs>
                <output
                  refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output]"
                  name="OLE DB Source Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[Cnt]"
                      dataType="i4"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[Cnt]"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[Cnt]"
                      name="Cnt"
                      truncationRowDisposition="FailComponent" />
                  </outputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[Cnt]"
                      dataType="i4"
                      name="Cnt" />
                  </externalMetadataColumns>
                </output>
                <output
                  refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output]"
                  isErrorOut="true"
                  name="OLE DB Source Error Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[Cnt]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[Cnt]"
                      name="Cnt" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
          </components>
          <paths>
            <path
              refId="Package\Data Flow Task.Paths[OLE DB Source Output]"
              endId="Package\Data Flow Task\JavaScript Component.Inputs[Input 0]"
              name="OLE DB Source Output"
              startId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output]" />
            <path
              refId="Package\Data Flow Task.Paths[Output 0]"
              endId="Package\Data Flow Task\Multicast.Inputs[Multicast Input 1]"
              name="Output 0"
              startId="Package\Data Flow Task\JavaScript Component.Outputs[Output 0]" />
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{0B597767-DBA0-4B31-B51F-B5367ECACCD5}"
      DTS:From="Package\Contact"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Data Flow Task" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{2581887F-3CC3-4345-B925-9542DFAC28B1}"
      DTS:From="Package\Activity"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\Data Flow Task" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{077FEFD6-37C6-4A7A-81EB-025DB7EBE2B8}"
      DTS:From="Package\Case"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\Data Flow Task" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="155,42"
          Id="Package\Data Flow Task"
          TopLeft="575,266" />
        <NodeLayout
          Size="105,42"
          Id="Package\Case"
          TopLeft="256,112" />
        <NodeLayout
          Size="114,42"
          Id="Package\Activity"
          TopLeft="262,267" />
        <NodeLayout
          Size="117,42"
          Id="Package\Contact"
          TopLeft="256,421" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="314.5,421">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="338,-113"
              Start="0,0"
              End="338,-105.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,-52.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,-52.5"
                    Point2="0,-56.5"
                    Point3="4,-56.5" />
                  <mssgle:LineSegment
                    End="334,-56.5" />
                  <mssgle:CubicBezierSegment
                    Point1="334,-56.5"
                    Point2="338,-56.5"
                    Point3="338,-60.5" />
                  <mssgle:LineSegment
                    End="338,-105.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="376,287.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="199,0"
              Start="0,0"
              End="191.5,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="191.5,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="308.5,154">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="344,112"
              Start="0,0"
              End="344,104.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52" />
                  <mssgle:CubicBezierSegment
                    Point1="0,52"
                    Point2="0,56"
                    Point3="4,56" />
                  <mssgle:LineSegment
                    End="340,56" />
                  <mssgle:CubicBezierSegment
                    Point1="340,56"
                    Point2="344,56"
                    Point3="344,60" />
                  <mssgle:LineSegment
                    End="344,104.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Data Flow Task">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="123,42"
          Id="Package\Data Flow Task\Multicast"
          TopLeft="433,298" />
        <NodeLayout
          Size="190,42"
          Id="Package\Data Flow Task\JavaScript Component"
          TopLeft="393,147" />
        <NodeLayout
          Size="157,42"
          Id="Package\Data Flow Task\OLE DB Source"
          TopLeft="102,147" />
        <EdgeLayout
          Id="Package\Data Flow Task.Paths[Output 0]"
          TopLeft="491.25,189">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,109"
              Start="0,0"
              End="0,101.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,101.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Data Flow Task.Paths[OLE DB Source Output]"
          TopLeft="259,168">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="134,0"
              Start="0,0"
              End="126.5,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="126.5,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Data Flow Task\OLE DB Source">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>